#!/bin/bash
# vim: set ft=sh!

SOURCE_DIR="${HOME}/Packages"
PKGDEST="/srv/pkgs"
AUR_GIT_SERVER="https://aur.archlinux.org"

function help_msg() {
  cat << EOF
$(tput setaf 4)aurctl - Aur helper$(tput sgr0)
  $(tput setaf 2)ls$(tput sgr0)            List source packages
  $(tput setaf 2)ls -b$(tput sgr0)         List built packages
  $(tput setaf 2)ls -i$(tput sgr0)         List installed packages
  $(tput setaf 2)down [pkg]$(tput sgr0)    Install package
  $(tput setaf 2)pull [pkg]$(tput sgr0)    Pull from packages repo
  $(tput setaf 2)pull all$(tput sgr0)      Pull all source repos 
  $(tput setaf 2)rm [pkg]$(tput sgr0)      Remove pkg source dir
  $(tput setaf 2)help$(tput sgr0)          Print this
EOF
}

function clone() {
  git clone ${AUR_GIT_SERVER}/$1.git $SOURCE_DIR/$1
}

function list() {
  case "$1" in
    "")
    ls $SOURCE_DIR -1
    ;;
    
    "-i")
    pacman -Qm
    ;;

    "-b")
    ls /srv/pkgs -1 | sed -r 's/.pkg.tar.xz//g'
    ;;
  esac
}

function remove() {
  read -p "Do you wish to remove $1 (Y/n)? " yn
  case $yn in
    "") rm -rf $SOURCE_DIR/$1;;
    [Yy]* ) rm -rf $SOURCE_DIR/$1;;
    [Nn]* ) exit;;
  esac
}

function pull_pkg() {
  echo "$(tput setaf 4)$1$(tput sgr0)"
  git -C $SOURCE_DIR/$1 pull
  echo
}

function pull() {
  case "$1" in
    "")
    help_msg
    ;;

    "all")
    for i in `ls $SOURCE_DIR`; do pull_pkg $i; done
    ;;
    
    *)
    pull_pkg $1
    ;;
  esac
}

# thanks Irm
function url_encode() {
  hexdump -v -e '1/1 "%02x\t"' -e '1/1 "%_c\n"' <<< "$*" \
    | LANG=C awk '
      $1 == "20"                    { printf("%s", "+"); next }
      $1 ~  /0[adAD]/               {                    next }
      $2 ~  /^[a-zA-Z0-9.*()\/_-]$/ { printf("%s", $2);  next }
                                    { printf("%%%s", $1)      }
    '
}

function rpc_search() {
  # avoid printf because url_encode outputs "%"
	search_url="$AUR_GIT_SERVER/rpc/?v=5&by=name&type=search&arg=$(url_encode "$1")"

	# only show 5 results
	curl --silent --fail $search_url | parse_rpc | sort_rpc | cleanup_rpc | head -n 10
}

function cleanup_rpc() {
  cut -d'|' -f 1,2 | sed 's/|/ - /g'
}

function sort_rpc() {
  sort -t '|' -k3rn
}

function parse_rpc() {
	awk -F '[^\\\\]"' -v RS='{"|,"|"}' '
    function unstring(str) {
      sub(/[^:]+:/, ""  , str) # remove prefix
      gsub(/\\\"/ , "\"", str) # un-escape quotes
      gsub(/\\\// , "/" , str) # un-escape urls
      gsub(/%/    , "%%", str) # escape percents for printf
      gsub(/\|/   , "/" , str) # replace pipe (our own field sep)
      gsub(/"$/   , ""  , str) # remove extra trailing quote
      if(substr(str, 1, 1) == "\"")
        return substr(str, 2, length(str)) # unquote value
      else
        return str
    }
    /Name":/        { printf "\033[01;34m%s\033[0m",    unstring($0) }
    /Description":/ { printf "|%s",   unstring($0) }
    /NumVotes":/    { printf "|%s\n",   unstring($0) }
  '
#/URL":/         { printf "\033[01;32m%s\033[0m\n\n",   unstring($0) }
}

case "$1" in
  "ls")
  shift
  list $@
  ;;

	"search")
	shift
	rpc_search $@
	;;
  
  "clone")
  shift
  clone $@
  ;;

  "pull")
  shift
  pull $@
  ;;

  "rm")
  shift
  remove $@
  ;;

  "help"|"")
  help_msg
  ;;
esac
